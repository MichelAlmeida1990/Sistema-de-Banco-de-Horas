// src/js/firebase-config-v3.js - Configura√ß√£o Firebase v3.0.0 - CACHE CLEARED

// ‚úÖ CONFIGURA√á√ÉO FIREBASE - VERS√ÉO ATUALIZADA
const firebaseConfig = {
    apiKey: "AIzaSyAsYDPDgw1GO_yOB6prCxvxDfwI3kEfhvE",
    authDomain: "banco-de-horas-596ca.firebaseapp.com",
    projectId: "banco-de-horas-596ca",
    storageBucket: "banco-de-horas-596ca.firebasestorage.app",
    messagingSenderId: "75423178670",
    appId: "1:75423178670:web:b62ce90d78292f8485f23f",
    measurementId: "G-9RBTXPJ3PQ"
};

// ‚úÖ VERIFICAR SE FIREBASE SDK EST√Å CARREGADO
if (typeof firebase === 'undefined') {
    console.error('‚ùå Firebase SDK n√£o carregado!');
    throw new Error('Firebase SDK n√£o encontrado');
}

// ‚úÖ INICIALIZAR FIREBASE COM TRATAMENTO DE ERRO
let firebaseInitialized = false;
let authAvailable = false;
let auth = null;
let db = null;

console.log('üîß Iniciando Firebase v3.0.0...');
console.log('üîë API Key:', firebaseConfig.apiKey.substring(0, 10) + '...');

try {
    // Verificar se j√° foi inicializado
    if (firebase.apps.length === 0) {
        firebase.initializeApp(firebaseConfig);
        console.log('üî• Firebase inicializado com sucesso');
    } else {
        console.log('üî• Firebase j√° estava inicializado');
    }
    
    firebaseInitialized = true;
    
    // Configurar servi√ßos
    auth = firebase.auth();
    db = firebase.firestore();
    authAvailable = true;
    
    // ‚úÖ CONFIGURA√á√ïES DO FIRESTORE
    db.settings({
        cacheSizeBytes: firebase.firestore.CACHE_SIZE_UNLIMITED
    });

    // ‚úÖ HABILITAR PERSIST√äNCIA OFFLINE
    db.enablePersistence({ synchronizeTabs: true })
        .then(() => {
            console.log('üíæ Persist√™ncia offline habilitada');
        })
        .catch((err) => {
            if (err.code === 'failed-precondition') {
                console.warn('‚ö†Ô∏è Persist√™ncia falhou: m√∫ltiplas abas abertas');
            } else if (err.code === 'unimplemented') {
                console.warn('‚ö†Ô∏è Navegador n√£o suporta persist√™ncia');
            } else {
                console.error('‚ùå Erro na persist√™ncia:', err);
            }
        });
        
} catch (error) {
    console.error('‚ùå Erro ao inicializar Firebase:', error);
    firebaseInitialized = false;
    authAvailable = false;
}

// ‚úÖ FUN√á√ÉO PARA VERIFICAR SE FIREBASE EST√Å DISPON√çVEL
function isFirebaseAvailable() {
    return firebaseInitialized && authAvailable && auth && db;
}

// ‚úÖ FUN√á√ÉO PARA VERIFICAR DOM√çNIO AUTORIZADO - UNIVERSAL
function isDomainAuthorized() {
    const currentDomain = window.location.hostname;
    const currentPort = window.location.port;
    const currentProtocol = window.location.protocol;
    
    // ‚úÖ DOM√çNIOS SEMPRE AUTORIZADOS
    const alwaysAuthorized = [
        // Localhost em todas as varia√ß√µes
        'localhost',
        '127.0.0.1',
        '0.0.0.0',
        // Firebase oficial
        'banco-de-horas-596ca.firebaseapp.com',
        'banco-de-horas-596ca.web.app',
        // Netlify, Vercel, GitHub Pages (caso use no futuro)
        'netlify.app',
        'vercel.app',
        'github.io',
        'surge.sh',
        'herokuapp.com'
    ];
    
    // ‚úÖ VERIFICAR DOM√çNIOS ESPEC√çFICOS
    const isSpecificDomain = alwaysAuthorized.some(domain => 
        currentDomain === domain || 
        currentDomain.endsWith('.' + domain) ||
        currentDomain.includes(domain)
    );
    
    if (isSpecificDomain) {
        console.log('‚úÖ Dom√≠nio autorizado:', currentDomain);
        return true;
    }
    
    // ‚úÖ VERIFICAR PADR√ïES DE DESENVOLVIMENTO
    const isDevelopment = 
        currentDomain === 'localhost' ||
        currentDomain === '127.0.0.1' ||
        currentDomain === '0.0.0.0' ||
        currentDomain.startsWith('192.168.') ||  // Rede local
        currentDomain.startsWith('10.') ||       // Rede local
        currentDomain.startsWith('172.') ||      // Rede local
        currentDomain.includes('.local') ||      // mDNS
        currentProtocol === 'file:' ||           // Arquivo local
        currentPort !== '' ||                    // Qualquer porta = desenvolvimento
        currentDomain.includes('ngrok') ||       // T√∫nel ngrok
        currentDomain.includes('tunnel');        // Outros t√∫neis
    
    if (isDevelopment) {
        console.log('üîß Ambiente de desenvolvimento detectado:', currentDomain + ':' + currentPort);
        return true;
    }
    
    // ‚úÖ VERIFICAR IPs LOCAIS E M√ìVEIS
    const isLocalIP = 
        /^192\.168\.\d{1,3}\.\d{1,3}$/.test(currentDomain) ||  // 192.168.x.x
        /^10\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(currentDomain) || // 10.x.x.x
        /^172\.(1[6-9]|2\d|3[01])\.\d{1,3}\.\d{1,3}$/.test(currentDomain); // 172.16-31.x.x
    
    if (isLocalIP) {
        console.log('üì± IP de rede local detectado:', currentDomain);
        return true;
    }
    
    // ‚úÖ PARA PRODU√á√ÉO: ACEITAR QUALQUER DOM√çNIO HTTPS
    if (currentProtocol === 'https:' && !currentPort) {
        console.log('üåê Dom√≠nio HTTPS em produ√ß√£o:', currentDomain);
        return true;
    }
    
    console.warn('‚ö†Ô∏è Dom√≠nio n√£o reconhecido:', currentDomain + ':' + currentPort);
    return false; // S√≥ bloqueia se realmente n√£o reconhecer
}

// ‚úÖ EXPORTAR PARA USO GLOBAL
window.auth = auth;
window.db = db;
window.isFirebaseAvailable = isFirebaseAvailable;
window.isDomainAuthorized = isDomainAuthorized;
window.firebaseInitialized = firebaseInitialized;

console.log('‚úÖ Firebase Config v3.0.0 carregado');
console.log('üî• Firebase dispon√≠vel:', isFirebaseAvailable());
console.log('üåê Dom√≠nio autorizado:', isDomainAuthorized());
console.log('üïê Timestamp:', new Date().toISOString()); 