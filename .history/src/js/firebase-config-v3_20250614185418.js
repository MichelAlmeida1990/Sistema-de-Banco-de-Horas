// src/js/firebase-config-v3.js - Configura√ß√£o Firebase v3.0.0 - CACHE CLEARED

// ‚úÖ CONFIGURA√á√ÉO FIREBASE - VERS√ÉO ATUALIZADA
const firebaseConfig = {
    apiKey: "AIzaSyAsYDPDgw1GO_yOB6prCxvxDfwI3kEfhvE",
    authDomain: "banco-de-horas-596ca.firebaseapp.com",
    projectId: "banco-de-horas-596ca",
    storageBucket: "banco-de-horas-596ca.firebasestorage.app",
    messagingSenderId: "75423178670",
    appId: "1:75423178670:web:b62ce90d78292f8485f23f",
    measurementId: "G-9RBTXPJ3PQ"
};

// ‚úÖ VERIFICAR SE FIREBASE SDK EST√Å CARREGADO
if (typeof firebase === 'undefined') {
    console.error('‚ùå Firebase SDK n√£o carregado!');
    throw new Error('Firebase SDK n√£o encontrado');
}

// ‚úÖ INICIALIZAR FIREBASE COM TRATAMENTO DE ERRO
let firebaseInitialized = false;
let authAvailable = false;
let auth = null;
let db = null;

console.log('üîß Iniciando Firebase v3.0.0...');
console.log('üîë API Key:', firebaseConfig.apiKey.substring(0, 10) + '...');

try {
    // Verificar se j√° foi inicializado
    if (firebase.apps.length === 0) {
        firebase.initializeApp(firebaseConfig);
        console.log('üî• Firebase inicializado com sucesso');
    } else {
        console.log('üî• Firebase j√° estava inicializado');
    }
    
    firebaseInitialized = true;
    
    // Configurar servi√ßos
    auth = firebase.auth();
    db = firebase.firestore();
    authAvailable = true;
    
    // ‚úÖ CONFIGURA√á√ïES DO FIRESTORE
    db.settings({
        cacheSizeBytes: firebase.firestore.CACHE_SIZE_UNLIMITED
    });

    // ‚úÖ HABILITAR PERSIST√äNCIA OFFLINE
    db.enablePersistence({ synchronizeTabs: true })
        .then(() => {
            console.log('üíæ Persist√™ncia offline habilitada');
        })
        .catch((err) => {
            if (err.code === 'failed-precondition') {
                console.warn('‚ö†Ô∏è Persist√™ncia falhou: m√∫ltiplas abas abertas');
            } else if (err.code === 'unimplemented') {
                console.warn('‚ö†Ô∏è Navegador n√£o suporta persist√™ncia');
            } else {
                console.error('‚ùå Erro na persist√™ncia:', err);
            }
        });
        
} catch (error) {
    console.error('‚ùå Erro ao inicializar Firebase:', error);
    firebaseInitialized = false;
    authAvailable = false;
}

// ‚úÖ FUN√á√ÉO PARA VERIFICAR SE FIREBASE EST√Å DISPON√çVEL
function isFirebaseAvailable() {
    return firebaseInitialized && authAvailable && auth && db;
}

// ‚úÖ FUN√á√ÉO PARA VERIFICAR DOM√çNIO AUTORIZADO - UNIVERSAL
function isDomainAuthorized() {
    const currentDomain = window.location.hostname;
    const currentPort = window.location.port;
    const currentProtocol = window.location.protocol;
    const fullUrl = window.location.href;
    
    console.log('üîç Verificando dom√≠nio:', {
        hostname: currentDomain,
        port: currentPort,
        protocol: currentProtocol,
        fullUrl: fullUrl
    });
    
    // ‚úÖ SEMPRE AUTORIZAR DESENVOLVIMENTO LOCAL
    const isLocalDevelopment = 
        currentDomain === 'localhost' ||
        currentDomain === '127.0.0.1' ||
        currentDomain === '0.0.0.0' ||
        currentDomain.startsWith('192.168.') ||
        currentDomain.startsWith('10.') ||
        currentDomain.startsWith('172.') ||
        currentProtocol === 'file:' ||
        currentPort !== '' ||  // Qualquer porta indica desenvolvimento
        fullUrl.includes('localhost') ||
        fullUrl.includes('127.0.0.1');
    
    if (isLocalDevelopment) {
        console.log('‚úÖ DESENVOLVIMENTO LOCAL - Dom√≠nio autorizado automaticamente:', currentDomain + ':' + currentPort);
        return true;
    }
    
    // ‚úÖ DOM√çNIOS OFICIAIS DO FIREBASE
    const firebaseDomains = [
        'banco-de-horas-596ca.firebaseapp.com',
        'banco-de-horas-596ca.web.app'
    ];
    
    const isFirebaseDomain = firebaseDomains.some(domain => 
        currentDomain === domain || currentDomain.endsWith('.' + domain)
    );
    
    if (isFirebaseDomain) {
        console.log('‚úÖ Dom√≠nio oficial Firebase:', currentDomain);
        return true;
    }
    
    // ‚úÖ OUTROS SERVI√áOS DE HOSPEDAGEM
    const hostingServices = [
        'netlify.app',
        'vercel.app', 
        'github.io',
        'surge.sh',
        'herokuapp.com',
        'ngrok.io',
        'ngrok.app'
    ];
    
    const isHostingService = hostingServices.some(service => 
        currentDomain.includes(service)
    );
    
    if (isHostingService) {
        console.log('‚úÖ Servi√ßo de hospedagem reconhecido:', currentDomain);
        return true;
    }
    
    // ‚úÖ VERIFICAR IPs DE REDE LOCAL (M√ìVEIS/TABLETS)
    const isLocalIP = 
        /^192\.168\.\d{1,3}\.\d{1,3}$/.test(currentDomain) ||
        /^10\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(currentDomain) ||
        /^172\.(1[6-9]|2\d|3[01])\.\d{1,3}\.\d{1,3}$/.test(currentDomain);
    
    if (isLocalIP) {
        console.log('‚úÖ IP de rede local (m√≥vel/tablet):', currentDomain);
        return true;
    }
    
    // ‚úÖ MODO PERMISSIVO: ACEITAR QUALQUER DOM√çNIO HTTPS
    if (currentProtocol === 'https:') {
        console.log('‚úÖ Dom√≠nio HTTPS aceito:', currentDomain);
        return true;
    }
    
    // ‚úÖ √öLTIMO RECURSO: ACEITAR TUDO EM DESENVOLVIMENTO
    console.log('‚ö†Ô∏è Dom√≠nio n√£o reconhecido, mas permitindo acesso:', currentDomain + ':' + currentPort);
    return true; // SEMPRE PERMITIR - modo ultra permissivo
}

// ‚úÖ EXPORTAR PARA USO GLOBAL
window.auth = auth;
window.db = db;
window.isFirebaseAvailable = isFirebaseAvailable;
window.isDomainAuthorized = isDomainAuthorized;
window.firebaseInitialized = firebaseInitialized;

console.log('‚úÖ Firebase Config v3.0.0 carregado');
console.log('üî• Firebase dispon√≠vel:', isFirebaseAvailable());
console.log('üåê Dom√≠nio autorizado:', isDomainAuthorized());
console.log('üïê Timestamp:', new Date().toISOString()); 